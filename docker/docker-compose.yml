# all server will be    restart: unless-stopped

version: "3.9"

networks:
  devops-net:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  elastic_data:
  logstash_pipeline:
  kibana_data:

services:
  # ------------ Prometheus ------------
  prometheus:
    build:
      context: ..
      dockerfile: docker/Dockerfiles/prometheus.Dockerfile
    container_name: prometheus
    restart: unless-stopped
    networks: [devops-net]
    ports:
      - "9090:9090"
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../prometheus/rules:/etc/prometheus/rules:ro
      - ../prometheus/targets:/etc/prometheus/targets:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-admin-api
      - --web.enable-lifecycle

  # ------------ Alertmanager ------------
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    networks: [devops-net]
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager

  # ------------ Grafana ------------
  grafana:
    build:
      context: ..
      dockerfile: docker/Dockerfiles/grafana.Dockerfile
    container_name: grafana
    restart: unless-stopped
    networks: [devops-net]
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      # Provisioning paths set inside Dockerfile
    volumes:
      - grafana_data:/var/lib/grafana
      # Dashboards & provisioning are copied in image; you can also bind-mount if you prefer live editing:
      # - ../grafana/dashboards:/etc/grafana/provisioning/dashboards
      # - ../grafana/provisioning:/etc/grafana/provisioning

  # ------------ Elasticsearch ------------
  elasticsearch:
    build:
      context: ..
      dockerfile: docker/Dockerfiles/elasticsearch.Dockerfile
    container_name: elasticsearch
    restart: unless-stopped
    networks: [devops-net]
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elastic_data:/usr/share/elasticsearch/data

  # ------------ Logstash ------------
  logstash:
    build:
      context: ..
      dockerfile: docker/Dockerfiles/logstash.Dockerfile
    container_name: logstash
    restart: unless-stopped
    networks: [devops-net]
    ports:
      - "5044:5044"    # Beats input
      - "9600:9600"    # Monitoring API
    depends_on:
      - elasticsearch
    volumes:
      - ../elk/logstash/pipelines.conf:/usr/share/logstash/pipeline/logstash.conf:ro

  # ------------ Kibana ------------
  kibana:
    build:
      context: ..
      dockerfile: docker/Dockerfiles/kibana.Dockerfile
    container_name: kibana
    restart: unless-stopped
    networks: [devops-net]
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
